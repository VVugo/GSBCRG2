//------------------------------------------------------------------------------
// <auto-generated>
//    Ce code a été généré à partir d'un modèle.
//
//    Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//    Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSBCR.modele
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class GSB_VisiteEntities : DbContext
    {
        public GSB_VisiteEntities()
            : base("name=GSB_VisiteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<FAMILLE> FAMILLEs { get; set; }
        public DbSet<MEDICAMENT> MEDICAMENTs { get; set; }
        public DbSet<MOTIF_VISITE> MOTIF_VISITE { get; set; }
        public DbSet<OFFRIR> OFFRIRs { get; set; }
        public DbSet<POSSEDER> POSSEDERs { get; set; }
        public DbSet<PRATICIEN> PRATICIENs { get; set; }
        public DbSet<RAPPORT_VISITE> RAPPORT_VISITE { get; set; }
        public DbSet<REGION> REGIONs { get; set; }
        public DbSet<SECTEUR> SECTEURs { get; set; }
        public DbSet<SPECIALITE> SPECIALITEs { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<TRAVAILLER> TRAVAILLERs { get; set; }
        public DbSet<TYPE_PRATICIEN> TYPE_PRATICIEN { get; set; }
        public DbSet<VISITEUR> VISITEURs { get; set; }
        public DbSet<VAFFECTATION> VAFFECTATION { get; set; }
    
        public virtual int updInfoVisiteur(string pMat, string pNom, string pPrenom, string pAdresse, string pCp, string pVille, Nullable<System.DateTime> pDateEmbauche, string pSecCode, string pLabCode, string pMdp)
        {
            var pMatParameter = pMat != null ?
                new ObjectParameter("pMat", pMat) :
                new ObjectParameter("pMat", typeof(string));
    
            var pNomParameter = pNom != null ?
                new ObjectParameter("pNom", pNom) :
                new ObjectParameter("pNom", typeof(string));
    
            var pPrenomParameter = pPrenom != null ?
                new ObjectParameter("pPrenom", pPrenom) :
                new ObjectParameter("pPrenom", typeof(string));
    
            var pAdresseParameter = pAdresse != null ?
                new ObjectParameter("pAdresse", pAdresse) :
                new ObjectParameter("pAdresse", typeof(string));
    
            var pCpParameter = pCp != null ?
                new ObjectParameter("pCp", pCp) :
                new ObjectParameter("pCp", typeof(string));
    
            var pVilleParameter = pVille != null ?
                new ObjectParameter("pVille", pVille) :
                new ObjectParameter("pVille", typeof(string));
    
            var pDateEmbaucheParameter = pDateEmbauche.HasValue ?
                new ObjectParameter("pDateEmbauche", pDateEmbauche) :
                new ObjectParameter("pDateEmbauche", typeof(System.DateTime));
    
            var pSecCodeParameter = pSecCode != null ?
                new ObjectParameter("pSecCode", pSecCode) :
                new ObjectParameter("pSecCode", typeof(string));
    
            var pLabCodeParameter = pLabCode != null ?
                new ObjectParameter("pLabCode", pLabCode) :
                new ObjectParameter("pLabCode", typeof(string));
    
            var pMdpParameter = pMdp != null ?
                new ObjectParameter("pMdp", pMdp) :
                new ObjectParameter("pMdp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updInfoVisiteur", pMatParameter, pNomParameter, pPrenomParameter, pAdresseParameter, pCpParameter, pVilleParameter, pDateEmbaucheParameter, pSecCodeParameter, pLabCodeParameter, pMdpParameter);
        }
    
        public virtual int addVisiteur(string pMat, string pNom, string pPrenom, string pAdresse, string pCp, string pVille, Nullable<System.DateTime> pDateEmbauche, string pSecCode, string pLabCode, string pMdp)
        {
            var pMatParameter = pMat != null ?
                new ObjectParameter("pMat", pMat) :
                new ObjectParameter("pMat", typeof(string));
    
            var pNomParameter = pNom != null ?
                new ObjectParameter("pNom", pNom) :
                new ObjectParameter("pNom", typeof(string));
    
            var pPrenomParameter = pPrenom != null ?
                new ObjectParameter("pPrenom", pPrenom) :
                new ObjectParameter("pPrenom", typeof(string));
    
            var pAdresseParameter = pAdresse != null ?
                new ObjectParameter("pAdresse", pAdresse) :
                new ObjectParameter("pAdresse", typeof(string));
    
            var pCpParameter = pCp != null ?
                new ObjectParameter("pCp", pCp) :
                new ObjectParameter("pCp", typeof(string));
    
            var pVilleParameter = pVille != null ?
                new ObjectParameter("pVille", pVille) :
                new ObjectParameter("pVille", typeof(string));
    
            var pDateEmbaucheParameter = pDateEmbauche.HasValue ?
                new ObjectParameter("pDateEmbauche", pDateEmbauche) :
                new ObjectParameter("pDateEmbauche", typeof(System.DateTime));
    
            var pSecCodeParameter = pSecCode != null ?
                new ObjectParameter("pSecCode", pSecCode) :
                new ObjectParameter("pSecCode", typeof(string));
    
            var pLabCodeParameter = pLabCode != null ?
                new ObjectParameter("pLabCode", pLabCode) :
                new ObjectParameter("pLabCode", typeof(string));
    
            var pMdpParameter = pMdp != null ?
                new ObjectParameter("pMdp", pMdp) :
                new ObjectParameter("pMdp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addVisiteur", pMatParameter, pNomParameter, pPrenomParameter, pAdresseParameter, pCpParameter, pVilleParameter, pDateEmbaucheParameter, pSecCodeParameter, pLabCodeParameter, pMdpParameter);
        }
    }
}
